System Setup
===============


After successfully installing transformato, you can now setup your first system. For this, you require three items:


+ The output of `CHARMM-GUI <http://www.charmm-gui.org/>`_ 's solution builder for your ligand - solvated once at its position within the protein-ligand complex and once in a pure waterbox.
+ A `config.yaml` which describes your general simulation parameters.
+ A `submit.ipynb` (or just standard .py) that generates your intermediate states.


.. hint:: 
    It is not strictly necessary to use CHARMM - GUI to solvate your system. You may build and solvate your system yourself. In this case however, you will also need to supply proper parameter files along with input scripts.

Finally, to actually analyze your simulations and calculate the resulting free energies, you'll need an `analysis.py` script - this is covered on the *Analysis* page.

File structure and supplying your protein/ligand
#####################################################

Please refer to this convenient and practical flowchart to understand transformato's folder structure:

.. image:: assets/images/transformato-tree.svg
    :alt: transformato-tree

While this may look complicated, all you need to do is to:

#. Create a folder called `your-structure-1` for your first structure
#. Take the CHARMM-GUI output folder (called something like charmm-gui-4842148) for your solvated ligand-protein complex, move it to this folder and rename it into `complex`
#. Take the CHARMM-GUI output folder for your solvated ligand in the waterbox, move it to this folder and rename it into `waterbox`
#. Do the same with your second, third, fourth... etc. structure
#. **Run the equillibration** part of the provided simulation input. An equillibrated system (and the generated .rst file) are necesary for transformato.

You`ll create the remaining files down below.

.. note:: 
    The submit.ipynb file is covered in :doc:`Running_Simulation`\ .

The config.yaml
#################

The config.yaml is perhaps the most important file you'll create. It contains:

#. Definitions of your structures and under which name to find them
#. Simulation parameters, such as simulation step and length
#. Eventual restraints, both automatic and manual


Let's take a look at a complete config.yaml:

.. code-block:: yaml

    ################
    system:
    ################
        structure2:
            name: "vim2_zn148"
            tlc: "LIG"
            waterbox:
            dirname: "waterbox"
            psf_file_name: "step3_input"
            crd_file_name: "step3_input"
            rst_file_name: "step4_equilibration"
            simulation_parameter: "step5_production.inp"
            intermediate-filename: "lig_in_waterbox"
            complex:
            dirname: "complex"
            psf_file_name: "step3.1_omm"
            crd_file_name: "step3.1_omm"
            rst_file_name: "step4_equilibration"
            simulation_parameter: "step5_production.inp"
            intermediate-filename: "lig_in_complex"

        structure1:
            name: "vim2_zn222"
            tlc: "LIG"
            waterbox:
            dirname: "waterbox"
            psf_file_name: "step3_input"
            crd_file_name: "step3_input"
            rst_file_name: "step4_equilibration"
            simulation_parameter: "step5_production.inp"
            intermediate-filename: "lig_in_waterbox"
            complex:
            dirname: "complex"
            psf_file_name: "step3_input"
            crd_file_name: "step3_input"
            rst_file_name: "step4_equilibration"
            simulation_parameter: "step5_production.inp"
            intermediate-filename: "lig_in_complex"

    ################
    simulation:
    ################
        parameters:
            nstep: 1250000
            nstdcd: 1000
            nstout: 1000
            cons: HBond
            dt: 0.004
            switch: "vfswitch"
            mini_nstep: 1000
        GPU: True
        workload-manager: "slurm"
        
        free-energy-type: "rbfe"
        ################
        solvation:
        ################
        steps_for_equilibration: 1000


The *system* container contains the setup information from your structure directories. Most importantly, the *name* parameter must be the folder name of that structure (the one containing the waterbox/ligand directories.)

You may actually define any number of structures. The structure you want is referenced when setting up the system.

.. object:: system

    .. object:: [structurename]

        Can be whatever you want - just be sure to point you ``submit.ipynb`` towards the correct structures. That being said, we recommend sticking with the boring-but-practical ``structure1``, ``structure2`` you see in our notebooks.

        
        .. option:: name

            The folder name of the folder containing the complex/ligand folders for that structure

        .. option:: tlc

            The residue name (resname) of the structure

        .. option:: other parameters

            These refer to the various files in the /openmm/ subfolder.


The *simulation* container contains the simulation parameters you want to use.

.. object:: simulation

    .. object:: parameters

        .. option:: nstep: (int)

            How many calculation steps you want to simulate

        .. option:: nstdcd: (int)

            How many steps you want in your trajectory file overall

        .. option:: nstout: (int)

            How many steps you want written out in the .log.out files

        .. option:: cons: ["HBond",None]

            What constraints (not *restraints*) you want in your system.

        .. option:: dt: (int)

            The timestep in picoseconds. With hydrogen mass repartitioning, up to 0.004 ps should be fine. Without it, the upper limit is realistically 0.002 before the simulation gets unstable.

        .. option:: switch: (["vfswitch","vfoff"])

            How the van-der-Waals forces are switched.

        .. option:: mini_nstep: (int)

            Steps for minimisation

        .. option:: GPU: ([True/False])
        
            Use GPU yes/no? For openMM this should always be yes. For CHARMM it should be yes until you run into problems.

        .. option:: workload-manager: (["slurm","CGE"])

            For which workload-manager the script files should be output.

        .. option:: free-energy-type: (["rbfe","rsfe"])

            Calculate relative binding free energy or relative solvation free energy

Restraints
###########

.. warning:: The documentation here is not yet implemented in the main branch yet and more aspirational/for development branches

.. danger:: This section only applies if you are running your simulations with openMM. Should you run your simulations using CHARMM, it will not apply the restraints **and give no warning about it**.



transformato supports two types of restraints: automatic and manual restraints.

Automatic Restraints
**************************

To activate automatic restraints for your ligand, add 

.. code-block:: yaml

    simulation:
        restraints: "auto"
        
to your `config.yaml`. This wil restrain your ligand in its original position using a harmonic potential of the form :math:`E=0.5k \cdot (r-r_0)²` (where  :math:`r`` is the current distance, :math:`r_0`` the initial distance, and :math:`k`` the force constant), applied within the centers of mass of your ligand and the surrounding protein structure, keeping these two vaguely fixed.

You may specify further keywords:

.. rubric:: Options for automatic restraints

.. object:: restraints: auto
    

    .. option:: k=[int]

        *optional:* Defines the spring constant used for force calculations. Default is 3

    .. option:: extremities=[int]

        *optional:* If used, transformato will not restraint the entire common core but rather look for [int] extremities. These are then restrained to the surrounding protein carbon-alphas.

    .. option:: shape=["harmonic","flatbottom"]`

        *optional:* Defines the shape of the energy potential.
        
        The potential energy term for the two forms is given as:

        + harmonic: :math:`E=0.5k \cdot (r-r_0)²`
        + flatbottom: :math:`E=k \cdot step(|r-r_0|),thresh) \cdot (r-r_0)²,`

        where  :math:`r`` is the current distance, :math:`r_0`` the initial distance, and :math:`k`` the force constant. The step function returns 0 until the threshold :math:`thresh` (defined as :code:`wellsize` by the config.yaml) has been surpassed, after which it returns 1. As such,
        the flat-bottom potential is essentially a harmonic potential where the energy within the \"well\" is zero. Note that the :code:`wellsize` acts like a *radius*, meaning it extends in all directions from its origin.

    .. figure:: assets/images/harm_vs_fb.png
        :alt: harmonic and flatbottom potentials
        
        Figure: The difference between a harmonic (*A*) and flat-bottom (*B*) potential. While both allow more movement closer to the restraint origin, a flat-bottom potential effectively allows defining
        a fixed sampling area that the ligand can move in without hindrance, but cannot leave (assuming a strong enough value for *k*).

    .. option:: scaling

        *optional:* If present, the k - Value of the force is linearly scaled in the first four intermediate states (``intst1: 0; intst2: 0.25; intst3: 0.5; intst4: 0.75; intst5: 1.0``)

    .. option:: wellsize [float]

        *optional*: Only takes effect in a flat-bottom potential. Defines the wellsize in nanometers. Default is 0.1 nm.

A full entry in your config.yaml might thus look like this:



.. code-block:: yaml

    restraints: "auto k=10 extremities=3 shape=harmonic scaling" 



.. caution:: Be somewhat sure of what your structure looks like, and do a sanity check on the generated restraints before production. As all restraints only act on the common core, setting an arbitrarily high number of extermities can lead to strange results

It should be noted that this means that a small file called `restraints.yaml` is created in your `intst*` - folders.
These have the following structure:


.. code-block:: yaml

    system:
        structure:
            tlc: LIG # same as in the config.yaml, but only one structure (as only one relevant)

    simulation:
        restraints: "auto" # same as in config.yaml
        ccs:  # this represents an array of your common core, upon which restraints can be applied
            - C1
            - C2
            - H2
    intst:
        scaling:0.8 # for non-immediate switches, how far along the scaling is. Only relevant for harmonic potentials.


It is not recommended to manually edit these files, as they are automatically created for each intermediate state.

Manual Restraints
*******************

To activate manual restraints for your ligand, add 

*config.yaml*

.. code-block:: yaml

    simulation:
        restraints: "manual"

to your config.yaml. Below, you may now specify an arbitrary number of restraints using the `MDAnalysis selection syntax <https://docs.mdanalysis.org/stable/documentation_pages/selections.html#simple-selections>`_ :

*config.yaml*

.. code-block:: yaml

    simulation:
        restraints: "manual"
        manualrestraints:
            restraint1:
                shape: "harmonic"
                group1: "resname LIG and type C"
                group2: "protein and type CA"
                k: 30
                r0: 2.41

You may define as many restraints as you like:

Code example with multiple restraints:

*config.yaml*

.. code-block:: yaml

    simulation:
        restraints: "manual"
        manualrestraints:
            restraint1:
                shape: "harmonic"
                group1: "resname LIG and type C"
                group2: "protein and type CA"
            restraint2:
                shape: "flatbottom"
                group1: "resname LIG and type C"
                group2: "protein and type CA"
            restraint3:
                shape: "harmonic"
                group1: "resname LIG and name C14"
                group2: "sphlayer 5 15 name C14 and protein and type CA"

Note that the individual restraints all need to have distinct names (restraint1, restraint2 etc.). It is common that they are numbered, but not required - they simply need to adhere to the yaml syntax.

.. rubric:: Options for manual restraints


.. object:: restraints: manual

    .. object:: manual-restraint

        You may freely choose the name of the restraint here. It may be useful to provide a 'speaking' name, as this will allow identification later.

        .. option:: shape=["harmonic","flatbottom"]'

            Shape of the energy potential. Default is "harmonic". See automatic restraints for details.

        .. option:: group1,group2=[MDAnalysis selection string]

            Defines which Common Core atoms are members of group1 or group2. Please note that group1 **must** be the ligand, and group2 the protein.

        .. option:: k=[int]

            *(optional):* Defines the harmonic force constant. Default is 3.

        .. option:: wellsize=[float]
            
            *(optional):* Defines the wellsize for flat-bottom restraints (unit is nanometers). Defaults to 0.1 nm.


As with automatic restraints, even manually specified restraints will never act on atoms not in the common core, as this would lead to nonsensical energy calculations.
