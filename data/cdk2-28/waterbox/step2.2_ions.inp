* GENERATED BY CHARMM-GUI (http://www.charmm-gui.org) v3.5 on Aug, 17. 2021. JOBID=2920866270
* GENERATES IONS
*

DIMENS CHSIZE 5000000 MAXRES 3000000

! Read topology and parameter files
stream toppar.str

! solvent only? ()
! this should not be here
! Read PSF and Coordinates
open read unit 10 card name step1_pdbreader.psf
read psf  unit 10 card

open read unit 10 card name step1_pdbreader.crd
read coor unit 10 card

define PROT sele all end

! protein volume, calculation with a grid spacing of 0.5
coor orient
coor stat

open write unit 10 card name step2.2_ions_orient.crd
write coor unit 10 card

calc dcel = 0.5
calc xdim = int ( ( ?xmax - ?xmin + 5.0 ) / @dcel ) + 1
calc ydim = int ( ( ?ymax - ?ymin + 5.0 ) / @dcel ) + 1
calc zdim = int ( ( ?zmax - ?zmin + 5.0 ) / @dcel ) + 1
calc space = @xdim * @ydim * @zdim

scalar wmain = radius
scalar wmain add 1.4    ! use solvent accessible surface for molecular volume
scalar 1 = wmain
scalar 2 set 6.0
coor volume hole space @space sele .not. resname TIP3 end

set molvol = ?volume

! system volume from parameters for water box
stream step2.1_waterbox.prm

if @XTLtype .eq. TETRagonal   calc sysvol = @A * @B * @C
if @XTLtype .eq. CUBIc        calc sysvol = @A * @B * @C
if @XTLtype .eq. ORTHorhombic calc sysvol = @A * @B * @C
if @XTLtype .eq. MONOclinic   calc sysvol = @A * @B * @C * sin ( @beta * ?pi / 180.0 )
if @XTLtype .eq. HEXAgonal    calc sysvol = sqrt( 0.75 ) * @C * @A * @A
if @XTLtype .eq. OCTAhedral   calc sysvol = 4.0 * sqrt( 3.0 ) / 9 * @A * @A * @A
if @XTLtype .eq. RHDO         calc sysvol = sqrt( 0.5 ) * @A * @A * @A
if @XTLtype .eq. TRIClinic then
   calc cosa = cos ( @alpha * ?pi / 180.0 )
   calc cosb = cos ( @beta  * ?pi / 180.0 )
   calc cosg = cos ( @gamma * ?pi / 180.0 )
   calc sysvol = @A * @B * @C * sqrt ( 1.0 - @cosa * @cosa - @cosb * @cosb - @cosg * @cosg + 2.0 * @cosa * @cosb * @cosg )
endif
if @XTLtype .eq. RHOMbohedral then
   calc cosa = cos ( @alpha * ?pi / 180.0 )
   calc sysvol = @A * @A * @A * sqrt ( 1.0 - @cosa * sqrt ( 1.0 + 2.0 * @cosa ) )
endif

!
! conc    : concentration (M)
! volumn  : ion accessible volume (Ang**3)
! npos    : number of positive ions of a particular compound
! nneg    : number of negative ions of a particular compound
! nion    : number of positive and negative ions of a particular compound
! npostot : total number of all positive ions
! nnegtot : total number of all negative ions
! niontot : total number of all ions
!

calc volumn = @sysvol - @molvol
calc npostot = 0
calc nnegtot = 0
calc niontot = 0

define ALLIONS sele none end

set ionind = 1
label do_ion
    define POS sele none end
    define NEG sele none end

    stream step2.2_ions_count.str @ionind

    calc ncharge = int( ?cgtot )
    calc cgtot = ?cgtot

    calc npos = 0
    calc nneg = 0
    if neutral_index .eq. @ionind then
        if ncharge .lt. 0 calc npos = int( abs( @cgtot ) / @poscharge )
        if ncharge .gt. 0 calc nneg = int( abs( @cgtot ) / @negcharge )
    endif

    calc diff = int ( @cgtot + @npos*@poscharge - @nneg*@negcharge )

    if neutral_index .eq. @ionind then
        set ntries = 0
        label neutral
            if diff .gt. 0 calc nneg = @nneg + 1
            if diff .lt. 0 calc npos = @npos + 1
            calc diff = int ( @cgtot + @npos*@poscharge - @nneg*@negcharge )
            incr ntries
            if ntries .ge. 10 stop ! ABNORMAL TERMINATION: can't neutralize this system
            if diff .ne. 0 goto neutral
    endif

    calc npos = @npos + int ( @conc * 6.021 * 0.0001 * @volumn ) * @negval
    calc nneg = @nneg + int ( @conc * 6.021 * 0.0001 * @volumn ) * @posval

    if npos .lt. 0 stop ! ABNORMAL TERMINATION: something wrong
    if nneg .lt. 0 stop ! ABNORMAL TERMINATION: something wrong

    !
    ! Randomly place the ions
    !

    ! initial positions for all ions
    calc xpos = @A / 2.0
    calc ypos = @B / 2.0
    calc zpos = @C / 2.0

    ! Generate positive ion
    if npos .gt. 0 then
        if isusercation .eq. 1 then
            set append
            define JUNK sele all end
            if ?nsel .gt. 0 set append = append

            set nresi = 0
            label readpos
                read psf  card name uploaded_files/@pos.psf @append
                read coor card name uploaded_files/@pos.crd @append

                rename segid TEMP sele .not. JUNK .and. .not. segid POS end

                if nresi .eq. 0 rename segid POS sele segid TEMP end
                if nresi .gt. 0 join POS TEMP

                set append = append
                incr nresi

                if nresi .lt. @npos goto readpos
                join POS renumber
        else
            read sequence @pos @npos
            generate POS warn
        endif

        define POS sele segid POS end

        if natompos .gt. 1 then
            if isusercation .eq. 0 then
                ! copy coordinates to all uninitialized POS
                read coor card name ion_coor/@pos.crd append
                define SOURCE sele POS .and. INIT end
                label duplpos
                    coor dupl sele SOURCE end sele POS .and. .not. INIT end
                    if ?nsel .gt. 0 goto duplpos
            endif

            ! get a translation vector using center of geometry of POS
            coor stat sele POS end
            calc xtran = @xpos - ?xave
            calc ytran = @ypos - ?yave
            calc ztran = @zpos - ?zave

            ! move center of geometry to selected position
            coor trans xdir @xtran ydir @ytran zdir @ztran sele POS end
        else
            coor set xdir @xpos ydir @ypos zdir @zpos select POS end
        endif
    endif

    ! Generate negative ion
    if nneg .gt. 0 then
        if isuseranion .eq. 1 then
            set append
            define JUNK sele all end
            if ?nsel .gt. 0 set append = append

            set nresi = 0
            label readneg
                read psf  card name uploaded_files/@neg.psf @append
                read coor card name uploaded_files/@neg.crd @append

                rename segid TEMP sele .not. JUNK .and. .not. segid NEG end

                if nresi .eq. 0 rename segid NEG sele segid TEMP end
                if nresi .gt. 0 join NEG TEMP

                set append = append
                incr nresi

                if nresi .lt. @nneg goto readneg
                join NEG renumber
        else
            read sequence @neg @nneg
            generate NEG warn
        endif

        define NEG sele segid NEG end

        if natomneg .gt. 1 then
            if isuseranion .eq. 0 then
                ! copy coordinates to all uninitialized NEG
                read coor card name ion_coor/@neg.crd append
                define SOURCE sele NEG .and. INIT end
                label duplneg
                    coor dupl sele SOURCE end sele NEG .and. .not. INIT end
                    if ?nsel .gt. 0 goto duplneg
            endif

            ! get a translation vector using center of geometry of NEG
            coor stat sele NEG end
            calc xtran = @xpos - ?xave
            calc ytran = @ypos - ?yave
            calc ztran = @zpos - ?zave

            ! move center of geometry to selected position
            coor trans xdir @xtran ydir @ytran zdir @ztran sele NEG end
        else
            coor set xdir @xpos ydir @ypos zdir @zpos select NEG end
        endif
    endif

    define IONS sele POS .or. NEG end
    define ALLIONS sele segid IONS .or. IONS end

    calc nion = @npos + @nneg

    incr npostot by @npos
    incr nnegtot by @nneg
    incr niontot by @nion

    if nion .eq. 0 goto continue

    !
    !Images Setup [to place all atoms inside the box]
    !

    COOR CONVERT ALIGNED SYMMETRIC @A @B @C @alpha @beta @gamma

    open read unit 10 card name crystal_image.str
    CRYSTAL DEFINE @XTLtype @A @B @C @alpha @beta @gamma
    CRYSTAL READ UNIT 10 CARD

    !Image centering by residue
    IMAGE BYRES XCEN @xcen YCEN @ycen ZCEN @zcen sele .not. ALLIONS end

    nbonds atom switch vatom vswitch -
           ctonnb 10.0 ctofnb 12.0 cutnb 15.0 cutim 15.0 -
           inbfrq -1 imgfrq -1 wmin 1.0 cdie eps 80.0
    ENERGY

    CONS FIX SELE .NOT. IONS END
    SKIP ALL EXCL VDW ELEC
    scalar wmain = charge

    !
    ! Initial placement of ions
    !

    calc cntrand = 0

    calc i   = 1
    label doinit

        calc cntrand = @cntrand + 1
        if cntrand .gt. 100 stop ! ABNORMAL TERMINATION: ion placing may not work.. stop here

        calc j = @i
        set ion = POS

        if j .gt. @npos then
           set ion = NEG
           calc j  = @j - @npos
        endif

        define target select segid @ion .and. resid @j end

        calc xpos = ( @A - 9.0 ) * ( ?random - 0.5 )
        calc ypos = ( @B - 9.0 ) * ( ?random - 0.5 )
        calc zpos = ( @C - 9.0 ) * ( ?random - 0.5 )

        ! move target to selected position
        coor stat select target end
        calc xtran = @xpos - ?xave
        calc ytran = @ypos - ?yave
        calc ztran = @zpos - ?zave
        coor trans xdir @xtran ydir @ytran zdir @ztran select target end

        ! apply a random rotation along XYZ
        calc xphi = ?random * 360.0
        calc yphi = ?random * 360.0
        calc zphi = ?random * 360.0
        coor rotate xcen @xpos ycen @ypos zcen @zpos xdir 1.0 -
            phi @xphi select target end
        coor rotate xcen @xpos ycen @ypos zcen @zpos ydir 1.0 -
            phi @yphi select target end
        coor rotate xcen @xpos ycen @ypos zcen @zpos zdir 1.0 -
            phi @zphi select target end

        ! check if the ions are too close to solute
        coor stat sele target end
        calc dcut = 3.5
        calc xmax = ?xmax + @dcut
        calc ymax = ?ymax + @dcut
        calc zmax = ?zmax + @dcut
        calc xmin = ?xmin - @dcut
        calc ymin = ?ymin - @dcut
        calc zmin = ?zmin - @dcut

        define JUNK sele .not. target .and. -
                         prop X .lt. @xmax .and. prop X .gt. @xmin .and. -
                         prop Y .lt. @ymax .and. prop Y .gt. @ymin .and. -
                         prop Z .lt. @zmax .and. prop Z .gt. @zmin  end

        if ?nsel .gt. 0 then
           coor dist cut 4.5 sele target end sele JUNK .and. .not. hydrogen end image
           if ?npair .gt. 0 goto doinit
        endif

        calc cntrand = 0
        increase i by 1
        if i .le. @nion goto doinit

    label continue

    ENERGY
    COOR CONVERT SYMMETRIC ALIGNED @A @B @C @alpha @beta @gamma
    CRYSTAL FREE


    ! get the number of @pos residues to reorder
    define JUNK sele segid IONS .and. resname @pos end
    set natoms = ?nsel
    calc nresi = @natoms / @natompos
    incr npos by @nresi

    ! join POS to @pos via reordering
    if nresi .gt. 0 then
        ! write the atoms to reorder
        define REORDER sele JUNK .or. segid POS end
        write coor card name temp.crd sele REORDER end

        ! reorder PSF atoms
        dele atoms sele REORDER end
        read sequ @pos @npos
        generate POS warn
        read coor ignore name temp.crd append
    endif

    ! get the number of @neg residues to reorder
    define JUNK sele segid IONS .and. resname @neg end
    set natoms = ?nsel
    calc nresi = @natoms / @natomneg
    incr nneg by @nresi

    ! join NEG to @neg via reordering
    if nresi .gt. 0 then
        ! write the atoms to reorder
        define REORDER sele JUNK .or. segid NEG end
        write coor card name temp.crd sele REORDER end

        ! reorder PSF atoms
        dele atoms sele REORDER end
        read sequ @neg @nneg
        generate NEG warn
        read coor ignore name temp.crd append
    else
        ! if POS was reordered, NEG may still need to be reordered
        define POS sele segid POS end
        set posat = ?selatom

        define NEG sele segid NEG end
        set negat = ?selatom

        if negat .eq. 0 goto skipreorder

        if posat .gt. @negat then
            write coor card name temp.crd sele NEG end
            dele atoms sele NEG end
            read sequ @neg @nneg
            generate NEG warn
            read coor ignore name temp.crd append
        endif
    endif

    label skipreorder

    !
    ! join everything to IONS segment
    !
    define IONS sele segid IONS end
    set nionatoms = ?nsel

    define POS sele segid POS end
    set nposatoms = ?nsel

    define NEG sele segid NEG end
    set nnegatoms = ?nsel

    if nionatoms .gt. 0 then
        if nposatoms .gt. 0 join IONS POS renumber
    else
        rename segid IONS sele segid POS end
    endif

    define IONS sele segid IONS end
    set nionatoms = ?nsel

    if nionatoms .gt. 0 then
        if nnegatoms .gt. 0 join IONS NEG renumber
    else
        rename segid IONS sele segid NEG end
    endif

    incr ionind
    if ionind le @niontypes goto do_ion


!
! Monte Carlo (MC) simulations of ions
!

!Random number generation
RAND UNIF ISEED 1629208895

calc nmc = 2000

calc i   = 1
label domc

    if i .le. @niontot then
       calc j = @i
    endif
    if i .gt. @niontot then
       calc j = int( ?random * @nion ) + 1
    endif

    define target select segid IONS .and. resid @j end
    coor copy comp sele target end

    calc xpos = @A * ( ?random - 0.5 )
    calc ypos = @B * ( ?random - 0.5 )
    calc zpos = @C * ( ?random - 0.5 )

    ! get a translation vector
    coor stat sele target end
    calc xtran = @xpos - ?xave
    calc ytran = @ypos - ?yave
    calc ztran = @zpos - ?zave

    calc xsave = ?xave

    ! move ion to selected position
    coor trans xdir @xtran ydir @ytran zdir @ztran sele target end

    ! also apply random rotation along XYZ
    calc xphi = ?random * 360.0
    calc yphi = ?random * 360.0
    calc zphi = ?random * 360.0
    coor rotate xcen @xpos ycen @ypos zcen @zpos xdir 1.0 -
        phi @xphi select target end
    coor rotate xcen @xpos ycen @ypos zcen @zpos ydir 1.0 -
        phi @yphi select target end
    coor rotate xcen @xpos ycen @ypos zcen @zpos zdir 1.0 -
        phi @zphi select target end

    ! check if the ions are too close to solute
    calc dcut = 5.0
    coor stat sele target end
    calc xmax = ?xmax + @dcut
    calc ymax = ?ymax + @dcut
    calc zmax = ?zmax + @dcut
    calc xmin = ?xmin - @dcut
    calc ymin = ?ymin - @dcut
    calc zmin = ?zmin - @dcut

    define JUNK sele .not. target .and. -
                     prop X .lt. @xmax .and. prop X .gt. @xmin .and. -
                     prop Y .lt. @ymax .and. prop Y .gt. @ymin .and. -
                     prop Z .lt. @zmax .and. prop Z .gt. @zmin  end

    if ?nsel .gt. 0 then
       coor dist cut 4.5 sele target end sele JUNK .and. .not. hydrogen end

       if ?npair .gt. 0 then
          coor copy sele target end
          goto domc
       endif
    endif

    ! before the move
    coor swap sele target end

    set pener = 99999.0
    energy
    if ?ener .lt. @pener calc pener = ?ener

    ! after the move
    coor swap sele target end

    energy
    calc dener = ?ener - @pener
    calc boltz = exp ( - @dener / 0.59 )

    if xsave .eq. @a       goto next
    if dener .lt. 0.0      goto next
    if ?random .lt. @boltz goto next

    ! energy is too high; use previous coordinates
    coor copy sele target end

    label next

    incr i by 1
    if i le @nmc goto domc

open read unit 10 card name step2.2_ions_orient.crd
read coor unit 10 card

open write unit 10 card name step2.2_ions.pdb
write coor unit 10 pdb
close unit 10

calc cgtot = int( ?cgtot )
if cgtot .ne. 0 stop ! ABNORMAL TERMINATION: failure to neutralize system

define target sele .not. segid IONS end
if ?nsel .gt. 0 delete atom sele target end

write title card name step2.2_ions.str
* set niontypes = @niontypes
* set npostot = @npostot
* set nnegtot = @nnegtot
* set niontot = @niontot
*

!
! Write CHARMM commands to regenerate ion part of PSF
!

set dojoin = no

write psf  card name step2.2_ions.psf
write coor card name step2.2_ions.crd

stop

